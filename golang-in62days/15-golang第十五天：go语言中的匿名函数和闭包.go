/*

golang第十五天:go语言中的匿名函数和闭包
http://www.kuaizh.com/?p=577


Go语言支持匿名函数，即函数可以像普通变量一样被传递或使用。
基本概念

闭包是可以包含自由（未绑定到特定对象）变量的代码块，这些变量不在这个代码块内或者

任何全局上下文中定义，而是在定义代码块的环境中定义。要执行的代码块（由于自由变量包含

在代码块中，所以这些自由变量以及它们引用的对象没有被释放）为自由变量提供绑定的计算环
境（作用域）。

闭包的价值

闭包的价值在于可以作为函数对象或者匿名函数，对于类型系统而言，这意味着不仅要表示

数据还要表示代码。支持闭包的多数语言都将函数作为第一级对象，就是说这些函数可以存储到

变量中作为参数传递给其他函数，最重要的是能够被函数动态创建和返回。

理解闭包的最简单的方法就是将闭包函数看成一个类，一个创建闭包函数调用就是实例化一个类。

对创建出来的闭包函数的调用就相当于调用实例的方法。闭包函数绑定的变量就相当于实例的属性。

*/

package main

import "fmt"

//创建闭包函数的函数.
func intSeq() func() int {
	i := 0
	//返回一个函数，该函数绑定了变量i.
	return func() int {
		i += 1
		return i
	}
}
func main() {
	//调用initSeq函数，返回一个匿名函数，该函数绑定了内部的变量i，并且该函数赋值给了nextInt变量。
	nextInt := intSeq()
	//调用闭包函数，注意内部绑定变量的变化。
	fmt.Println(nextInt())
	fmt.Println(nextInt())
	fmt.Println(nextInt())
	//新创建的函数，内部绑定变量并不是以前创建的函数的变量。
	newInts := intSeq()
	fmt.Println(newInts())
}

/*

执行结果：
1
2
3
1


*/
